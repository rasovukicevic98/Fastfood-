/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rs.ac.bg.fon.ps.view.form;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import kontroler.Controller;
import rs.ac.bg.fon.ps.domain.MeasurementUnit;
import rs.ac.bg.fon.ps.domain.RawMaterial;
import rs.ac.bg.fon.ps.domain.Supplier;

/**
 *
 * @author Raso
 */
public class FrmNewRawMaterial extends javax.swing.JDialog {

    /**
     * Creates new form FrmNewRawMaterial
     */
   // private final Controller controller;
    public FrmNewRawMaterial(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
      //  this.controller = new Controller();
        try{
            prepareView();
        }catch(Exception ex){
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error in view initialization"+ex.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
       }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelRawMaterial = new javax.swing.JPanel();
        lblName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        lblAlarm = new javax.swing.JLabel();
        txtAlarm = new javax.swing.JTextField();
        lblMeasurementUnit = new javax.swing.JLabel();
        cmbMeasurementUnit = new javax.swing.JComboBox();
        btnSave = new javax.swing.JButton();
        lblSupplier = new javax.swing.JLabel();
        cmbSupplier = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("New Raw Material");

        panelRawMaterial.setBorder(javax.swing.BorderFactory.createTitledBorder("Raw Mateiral"));

        lblName.setText("Name:");

        lblAlarm.setText("Alarm");

        txtAlarm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAlarmActionPerformed(evt);
            }
        });

        lblMeasurementUnit.setText("Measurement unit: ");

        cmbMeasurementUnit.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        lblSupplier.setText("Supplier");

        cmbSupplier.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout panelRawMaterialLayout = new javax.swing.GroupLayout(panelRawMaterial);
        panelRawMaterial.setLayout(panelRawMaterialLayout);
        panelRawMaterialLayout.setHorizontalGroup(
            panelRawMaterialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRawMaterialLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelRawMaterialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelRawMaterialLayout.createSequentialGroup()
                        .addGroup(panelRawMaterialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblMeasurementUnit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblAlarm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblSupplier, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(34, 34, 34)
                        .addGroup(panelRawMaterialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtName, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)
                            .addComponent(txtAlarm)
                            .addComponent(cmbMeasurementUnit, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbSupplier, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelRawMaterialLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnSave)))
                .addContainerGap())
        );
        panelRawMaterialLayout.setVerticalGroup(
            panelRawMaterialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRawMaterialLayout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(panelRawMaterialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelRawMaterialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAlarm)
                    .addComponent(txtAlarm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelRawMaterialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSupplier)
                    .addComponent(cmbSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(panelRawMaterialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMeasurementUnit)
                    .addComponent(cmbMeasurementUnit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addComponent(btnSave)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelRawMaterial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelRawMaterial, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtAlarmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAlarmActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAlarmActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
      
        try{
            String name = txtName.getText().trim();
            if(checkForDuplicates(name)==false){
                JOptionPane.showMessageDialog(this, "Raw material alreay exists!");
                return;
            }
            validateForm();
            RawMaterial rawMaterial = new RawMaterial();
            //rawMaterial.setId(Long.valueOf(txtID.getText().trim()));
            rawMaterial.setName(txtName.getText().trim());
            rawMaterial.setAlarm(Double.valueOf(txtAlarm.getText().trim()));
            rawMaterial.setMeasurementUnit((MeasurementUnit)cmbMeasurementUnit.getSelectedItem());
            rawMaterial.setSavedByUser(Controller.getInstance().getUlogovaniUser());
            rawMaterial.setSupplier((Supplier)cmbSupplier.getSelectedItem());
            Controller.getInstance().addRawMaterial(rawMaterial);
            

            JOptionPane.showMessageDialog(this, "Raw Material is saved");
            
            
            
            
        }catch(Exception ex){
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Save raw material error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmNewRawMaterial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmNewRawMaterial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmNewRawMaterial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmNewRawMaterial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FrmNewRawMaterial dialog = new FrmNewRawMaterial(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox cmbMeasurementUnit;
    private javax.swing.JComboBox cmbSupplier;
    private javax.swing.JLabel lblAlarm;
    private javax.swing.JLabel lblMeasurementUnit;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblSupplier;
    private javax.swing.JPanel panelRawMaterial;
    private javax.swing.JTextField txtAlarm;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables

    private void prepareView()throws Exception {
        fillCmbMeasurementUnit();
        fillCmbSupplier();
        


    }

    

    private void validateForm() throws Exception {
        
        String errorMessage="";
       // boolean goof = checkForDuplicates(txtName.getText().trim());
        if(txtName.getText().trim().isEmpty()){ 
            errorMessage+= "Name cannot be empty.\n";
        }
        if(isNumeric(txtAlarm.getText().trim())==false){
            errorMessage+= "Alarm mora biti broj.\n";
        }
//        if(goof==false){
//            errorMessage+= "Raw materijal vec postoji!";
//        }
        if(txtAlarm.getText().isEmpty()){
            errorMessage+= "Alarm cannot be empty.\n";
        }
        if(!errorMessage.isEmpty()){
            //JOptionPane.showMessageDialog(this, errorMessage);
             throw new Exception(errorMessage);
        }
}
private void fillCmbMeasurementUnit() throws Exception {
        cmbMeasurementUnit.removeAllItems();
        for(MeasurementUnit measurementUnit : MeasurementUnit.values()){
            cmbMeasurementUnit.addItem(measurementUnit);
        }
        
    }
    private void fillCmbSupplier() throws SQLException, Exception {
           
        List<Supplier> suppliers=Controller.getInstance().getAllSuppliers();
        cmbSupplier.removeAllItems();
        for(Supplier supplier : suppliers){
            System.out.println(supplier);
            cmbSupplier.addItem(supplier);
            
        }
        
        
        
                    
            

    }

    private boolean checkForDuplicates(String checker) {
        List<RawMaterial>rawMaterials = Controller.getInstance().getAllRawMaterials();
        String ime = txtName.getText().trim();
        System.out.println("Naziv raw materiala koji smo unijeli:"+ime);
        for (RawMaterial rawMaterial : rawMaterials) {
            System.out.println("Ime onog kojeg provjeravamo:"+rawMaterial.getName());
            if(ime.equals(rawMaterial.getName()))return false;
        }
        return true;
    }
    public boolean isNumeric (String broj){
        for (char c : broj.toCharArray()) {
            if(!Character.isDigit(c)){
                return false;
            }
        }
        return true;
    }
}
